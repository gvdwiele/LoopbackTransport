//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LoopbackTransport.Configuration
{
    using System;
    using System.Configuration;
    using System.ServiceModel;
    using System.ServiceModel.Channels;
    using System.ServiceModel.Configuration;
    using LoopbackTransport.Channels;

    /// <summary>
    /// For plugging the Loopback transport binding element in configuration
    /// </summary>
    public class LoopbackTransportBindingElementExtensionElement : BindingElementExtensionElement
    {

        public override Type BindingElementType
        {
            get
            {
                return typeof(LoopbackTransportBindingElement);
            }
        }

        protected override BindingElement CreateBindingElement()
        {
            LoopbackTransportBindingElement loopbackTransportBindingElement = new LoopbackTransportBindingElement();
            this.ApplyConfiguration(loopbackTransportBindingElement);
            return loopbackTransportBindingElement;
        }

        [ConfigurationProperty(LoopbackTransportConfigurationStrings.ManualAddressing, DefaultValue = LoopbackTransportDefaults.DefaultManualAddressing)]
        public bool ManualAddressing
        {
            get
            {
                return ((bool)(base[LoopbackTransportConfigurationStrings.ManualAddressing]));
            }
            set
            {
                base[LoopbackTransportConfigurationStrings.ManualAddressing] = value;
            }
        }

        [ConfigurationProperty(LoopbackTransportConfigurationStrings.CopyMessageProperties, DefaultValue = LoopbackTransportDefaults.DefaultCopyMessageProperties)]
        public bool CopyMessageProperties
        {
            get
            {
                return ((bool)(base[LoopbackTransportConfigurationStrings.CopyMessageProperties]));
            }
            set
            {
                base[LoopbackTransportConfigurationStrings.CopyMessageProperties] = value;
            }
        }


        protected override ConfigurationPropertyCollection Properties
        {
            get
            {
                ConfigurationPropertyCollection properties = base.Properties;
                properties.Add(new ConfigurationProperty(LoopbackTransportConfigurationStrings.ManualAddressing, typeof(bool), LoopbackTransportDefaults.DefaultManualAddressing));
                properties.Add(new ConfigurationProperty(LoopbackTransportConfigurationStrings.CopyMessageProperties, typeof(bool), LoopbackTransportDefaults.DefaultCopyMessageProperties));
                return properties;
            }
        }

        //called to apply the configuration to the RUNTIME channel stack binding element
        public override void ApplyConfiguration(BindingElement bindingElement)
        {
            base.ApplyConfiguration(bindingElement);
            LoopbackTransportBindingElement loopbackTransportBindingElement = bindingElement as LoopbackTransportBindingElement;
            loopbackTransportBindingElement.ManualAddressing = this.ManualAddressing;
            loopbackTransportBindingElement.CopyMessageProperties = this.CopyMessageProperties;
        }

        protected override void InitializeFrom(BindingElement bindingElement)
        {
            base.InitializeFrom(bindingElement);
            LoopbackTransportBindingElement loopbackTransportBindingElement = bindingElement as LoopbackTransportBindingElement;
            this.ManualAddressing = loopbackTransportBindingElement.ManualAddressing;
            this.CopyMessageProperties = loopbackTransportBindingElement.CopyMessageProperties;
        }

        //config to config copy
        public override void CopyFrom(ServiceModelExtensionElement from)
        {
            base.CopyFrom(from);
            LoopbackTransportBindingElementExtensionElement source = ((LoopbackTransportBindingElementExtensionElement)(from));
            this.ManualAddressing = source.ManualAddressing;
            this.CopyMessageProperties = source.CopyMessageProperties;
        }
    }
}
